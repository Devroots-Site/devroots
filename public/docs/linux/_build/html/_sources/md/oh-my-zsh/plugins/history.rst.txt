.. title:: "Oh My Zsh: History-Plugin Dokumentation"

History ‚è≤Ô∏è
========================================


Einf√ºhrung üöÄ
--------------------------

Das `history`-Plugin von Oh My Zsh erweitert die Funktionalit√§t der Zsh-Shell, indem es zus√§tzliche Aliase und Einstellungen f√ºr den Umgang mit der Befehlsverlaufshistorie bereitstellt.
Dies erleichtert die Navigation und Verwaltung vorheriger Befehle und verbessert somit die Effizienz auf der Kommandozeile.

Installation üõ†Ô∏è
--------------------------

Um das `history`-Plugin zu aktivieren, f√ºgen Sie es der Plugin-Liste in Ihrer `.zshrc`-Datei hinzu:

.. code-block:: sh

   plugins=(... history)

Stellen Sie sicher, dass Sie nach der √Ñnderung die Zsh neu starten oder die `.zshrc` neu laden:

.. code-block:: sh

   source ~/.zshrc

Funktionen und Aliase üéØ
------------------------------ 

Das `history`-Plugin definiert mehrere n√ºtzliche Aliase, um die Arbeit mit der Befehlsverlaufshistorie zu erleichtern:

- **`h`**: Alias f√ºr den Befehl `history`, zeigt die Befehlsverlaufshistorie an.

- **`hs`**: F√ºhrt eine Suche in der Befehlsverlaufshistorie durch. Beispiel:

  .. code-block:: sh

    hs git

Dies listet alle vorherigen Befehle auf, die das Wort "git" enthalten.

- **`hsi`**: F√ºhrt eine inkrementelle Suche in der Befehlsverlaufshistorie durch. Beispiel:

  .. code-block:: sh

    hsi ls

Dies zeigt interaktiv alle Befehle an, die mit "ls" beginnen, w√§hrend Sie tippen.

- **`h -10`**: Zeigt die letzten 10 Befehle in der Verlaufshistorie an.

- **`!n`**: F√ºhrt den Befehl mit der Nummer `n` in der Verlaufshistorie erneut aus. Beispiel:

  .. code-block:: sh

    !42

Dies f√ºhrt den 42. Befehl in der Verlaufshistorie erneut aus.

- **`!string`**: F√ºhrt den zuletzt eingegebenen Befehl, der mit `string` beginnt, erneut aus. Beispiel:

  .. code-block:: sh

    !git

Dies f√ºhrt den letzten Befehl, der mit "git" beginnt, erneut aus.

- **`!?string`**: F√ºhrt den zuletzt eingegebenen Befehl, der `string` enth√§lt, erneut aus. Beispiel:

  .. code-block:: sh

    !?status

Dies f√ºhrt den letzten Befehl, der "status" enth√§lt, erneut aus.



Kombination aus Fuzzy Finder und History üß©
====================================================

Das `history`-Plugin kann mit dem Fuzzy Finder (`fzf`) kombiniert werden, um die Suche und Auswahl von Befehlen in der Verlaufshistorie zu verbessern.

Nach der Installation von `fzf` k√∂nnen Sie die Befehlsverlaufshistorie interaktiv durchsuchen:

- **Befehlshistorie durchsuchen**:

  .. code-block:: sh

     history | fzf

- **Befehlshistorie durchsuchen und ausf√ºhren**:

  .. code
  
     eval $(history | fzf)

- **Befehlshistorie durchsuchen und bearbeiten**:

    .. code-block:: sh
    
         eval $(history | fzf | sed 's/^[0-9]* *//')

- **Befehlshistorie durchsuchen und in Editor √∂ffnen**: 

  .. code-block:: sh

     fc -l | fzf | xargs $EDITOR

- **Befehlshistorie durchsuchen und in Shell ausf√ºhren**:

    .. code-block:: sh
    
         fc -l | fzf | sh

- **Befehlshistorie durchsuchen und in Vim √∂ffnen**:

    .. code-block:: sh
    
         fc -l | fzf | xargs vim

- **Befehlshistorie durchsuchen und in Tmux √∂ffnen**:

    .. code-block:: sh
    
         fc -l | fzf | xargs tmux

STRG R √ºberschreiben von FZF (Fuzzy Finder) üîÑ
---------------------------------------------------------

Diese Anleitung beschreibt, wie Sie einen Fuzzy Finder f√ºr die Zsh-Historie einrichten k√∂nnen. Damit k√∂nnen Sie √ºber die Tastenkombination **Strg+R** (oder eine andere Kombination) schnell und einfach durch Ihre Zsh-Historie navigieren und Befehle ausw√§hlen.

Voraussetzungen
----------------

- **Zsh** ist installiert und als Standard-Shell konfiguriert.
- Ihre Zsh-Historie wird bereits gespeichert.
- Das Tool **fzf** ist installiert. Anleitung zur Installation finden Sie unter [fzf Dokumentation](https://test.com).

Schritt 1: Funktion zur Nutzung des Fuzzy Finders erstellen
-----------------------------------------------------------

F√ºgen Sie die folgende Funktion in Ihre ``~/.zshrc`` Datei ein:

.. code-block:: zsh

    # Fuzzy-Finder f√ºr die Zsh-Historie ohne Nummern
    function fzf_history() {
        local selected_command=$(history -r 1 | awk '{ $1=""; print substr($0,2) }' | fzf --height 40% --reverse --border --preview="echo {}")
        if [ -n "$selected_command" ]; then
            BUFFER="$selected_command"   # Setzt den gew√§hlten Befehl in die Kommandozeile
            CURSOR=$#BUFFER              # Setzt den Cursor ans Ende der Zeile
        fi
        zle reset-prompt
    }

Schritt 2: Tastenkombination hinzuf√ºgen
----------------------------------------

Verkn√ºpfen Sie die Funktion mit einer Tastenkombination, zum Beispiel **Strg+R**. F√ºgen Sie dazu folgende Zeilen in Ihre ``~/.zshrc`` ein:

.. code-block:: zsh

    zle -N fzf_history
    bindkey '^R' fzf_history

Schritt 3: √Ñnderungen aktivieren
---------------------------------

Damit die √Ñnderungen wirksam werden, laden Sie Ihre ``~/.zshrc`` Datei neu:

.. code-block:: zsh

    source ~/.zshrc

Schritt 4: Nutzung des Fuzzy Finders
-------------------------------------

- Dr√ºcken Sie **Strg+R**, um den Fuzzy Finder zu √∂ffnen.
- Navigieren Sie durch Ihre Zsh-Historie.
- W√§hlen Sie den gew√ºnschten Befehl aus, und er wird in Ihre Kommandozeile eingef√ºgt.

Weitere Informationen
----------------------

Besuchen Sie die `Fuzzy-Finder <../../packetes/fuzzyfinder.html>`_ , um mehr √ºber die Anpassungsm√∂glichkeiten von **fzf** zu erfahren.