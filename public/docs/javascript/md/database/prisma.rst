Prisma üîÆ
=======================

Prisma ist ein leistungsstarkes ORM (Object-Relational Mapping)-Tool f√ºr Node.js und TypeScript. Es erleichtert die Arbeit mit Datenbanken durch eine intuitive API und unterst√ºtzt mehrere Datenbankmanagementsysteme wie PostgreSQL, MySQL, SQLite, und andere. Prisma bietet eine moderne und typsichere Methode, um mit Datenbanken zu interagieren.

Was ist Prisma? ü§î
----------------------
Prisma ist eine Open-Source-Bibliothek, die aus drei Hauptkomponenten besteht:

1. **Prisma Client**:
   - Ein automatisiert generierter und typsicherer Client f√ºr den Zugriff auf Ihre Datenbank.
   - Unterst√ºtzt CRUD-Operationen, komplexe Abfragen und Transaktionen.

2. **Prisma Migrate**:
   - Ein Tool zur Datenbankmigration, mit dem Sie Ihre Datenbankschemata sicher und konsistent √§ndern k√∂nnen.

3. **Prisma Studio**:
   - Eine benutzerfreundliche Weboberfl√§che f√ºr das Durchsuchen und Bearbeiten von Daten in Ihrer Datenbank.

Warum Prisma verwenden? ü§î
----------------------------
- **Typsicherheit:** Dank TypeScript erhalten Sie IntelliSense und Fehlererkennung w√§hrend der Entwicklung.
- **Datenbankagnostik:** Prisma funktioniert mit mehreren Datenbanken, sodass Sie flexibel bleiben.
- **Einfachheit:** Reduziert Boilerplate-Code und bietet klare Schnittstellen.
- **Produktivit√§t:** Schneller Entwicklungszyklus durch intuitive Werkzeuge wie Prisma Studio und Migrationsmanagement.

Wann Prisma verwenden? ü§î
--------------------------
Prisma eignet sich hervorragend f√ºr:
- Node.js-Projekte, die eine Datenbank verwenden.
- Teams, die TypeScript nutzen und von Typsicherheit profitieren m√∂chten.
- Projekte, die einfache Migrationswerkzeuge und eine klare Schnittstelle ben√∂tigen.
- Anwendungen, die komplexe Datenbankabfragen durchf√ºhren.

Ein Prisma-Projekt erstellen üöÄ
--------------------------------
Folgen Sie diesen Schritten, um ein Prisma-Projekt zu starten:

1. **Node.js-Projekt initialisieren:**
.. code-block:: bash

   mkdir prisma-app

   cd prisma-app

   npm init -y

   npm install prisma --save-dev

   npm install @prisma/client


2. **Prisma initialisieren:**
.. code-block:: bash

   npx prisma init


- Dadurch wird ein Ordner `prisma/` mit einer Standardkonfigurationsdatei `schema.prisma` erstellt.

Datenbankverbindung einrichten üîó
-----------------------------------

Prisma speichert die Verbindungsinformationen zur Datenbank in der .env-Datei. Diese Datei wird automatisch erstellt, wenn Sie Prisma initialisieren.

Beispiel .env-Datei:
.. code-block:: bash
    DATABASE_URL="postgresql://USER:PASSWORD@HOST:PORT/DATABASE"

Erl√§uterung:

- USER: Benutzername der Datenbank.
- PASSWORD: Passwort des Benutzers.
- HOST: Hostname oder IP-Adresse der Datenbank.
- PORT: Port der Datenbank (z. B. 5432 f√ºr PostgreSQL).
- DATABASE: Name der Datenbank.

Prisma-Schema aktualisieren
--------------------------------

In der Datei prisma/schema.prisma wird die Datenbankverbindung √ºber die datasource-Definition hergestellt. Beispiel:

.. code-block:: typescript
    datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    }


Ein Prisma-Schema erstellen üìÑ
--------------------------------
Das Prisma-Schema definiert Ihre Datenbankstruktur. Es befindet sich in der Datei `prisma/schema.prisma`. Ein Beispiel:

.. code-block:: typescript

    model User {
    id    Int     @id @default(autoincrement())
    name  String  @db.VarChar(100)  // Definiert die maximale L√§nge
    email String  @unique
    posts Post[]
    }

    model Post {
    id      Int     @id @default(autoincrement())
    title   String
    content String
    userId  Int
    user    User    @relation(fields: [userId], references: [id])
    }


**Erl√§uterung:**

- `@id`: Kennzeichnet die Prim√§rschl√ºssel.
- `@default(autoincrement())`: Automatische ID-Generierung.
- `@unique`: Markiert das Feld als eindeutig.
- `@relation`: Definiert Beziehungen zwischen Tabellen.
- `@db.VarChar`: Spezifische Datenbankdefinition f√ºr String-Felder.

Weitere Datentypen im Prisma-Schema üìù
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- `String`: Textfelder.
- `Int`: Ganzzahlen.
- `Float`: Dezimalzahlen.
- `Boolean`: Wahr/Falsch-Werte.
- `DateTime`: Zeit- und Datumsangaben.
- `Json`: JSON-Daten.
- `Optional`: F√ºr optionale Felder (z. B. `name String?`).
- `Required`: Standardm√§√üig sind alle Felder erforderlich, sofern kein `?` hinzugef√ºgt wird.

**Beispiel mit `@db.VarChar` und `Required`**
.. code-block:: prisma

    model Product {
    id      Int     @id @default(autoincrement())
    name    String  @db.VarChar(255)  // Erfordert maximale Zeichenanzahl
    price   Float   @default(0.0)
    inStock Boolean // Standard ist required
    }

Prisma Generieren üß¨
------------------------

F√ºhren Sie den Befehl `npx prisma generate` aus, um den Prisma-Client zu generieren:

.. code-block:: bash

    npx prisma generate

Das generieren ist notwendig um den Prisma-Client zu erstellen, der f√ºr die Interaktion mit der Datenbank verwendet wird.

Migration ausf√ºhren üöÄ
------------------------

F√ºhren Sie eine Migration durch, um Ihre Datenbank mit dem Prisma-Schema zu synchronisieren:

.. code-block:: bash

    npx prisma migrate dev --name init


Warum ist Prisma Migrate wichtig? ü§î
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- Es sorgt daf√ºr, dass √Ñnderungen am Prisma-Schema automatisch auf die Datenbank angewendet werden.
- Es erleichtert das Verfolgen und Wiederherstellen von √Ñnderungen.

Kann man Prisma ohne Migrate verwenden? ü§î
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Ja, Sie k√∂nnen Prisma verwenden, ohne Migrate auszuf√ºhren. In diesem Fall m√ºssen Sie die Datenbankmanipulationen manuell √ºber SQL ausf√ºhren. Dies ist jedoch nicht empfohlen, da es die Entwicklungszeit erh√∂ht und zu Inkonsistenzen f√ºhren kann.

CRUD-Operationen mit Prisma Client üíª
---------------------------------------

Nach der Migration k√∂nnen Sie den Prisma Client verwenden, um mit der Datenbank zu interagieren.

1. **Prisma Client importieren:**

.. code-block:: javascript

   const { PrismaClient } = require('@prisma/client');
   // oder import { PrismaClient } from '@prisma/client';
   const prisma = new PrismaClient();
   

2. **Daten erstellen:**

.. code-block:: javascript

   async function createUser() {
     const user = await prisma.user.create({
       data: {
         name: 'Alice',
         email: 'alice@example.com',
       },
     });
     console.log(user);
   }
   createUser();
   

3. **Daten lesen:**

.. code-block:: javascript

   async function getUsers() {
     const users = await prisma.user.findMany();
     console.log(users);
   }
   getUsers();


4. **Daten aktualisieren:**

.. code-block:: javascript

   async function updateUser() {
     const updatedUser = await prisma.user.update({
       where: { email: 'alice@example.com' },
       data: { name: 'Alice Updated' },
     });
     console.log(updatedUser);
   }
   updateUser();
   

5. **Daten l√∂schen:**

.. code-block:: javascript

   async function deleteUser() {
     await prisma.user.delete({
       where: { email: 'alice@example.com' },
     });
     console.log('User deleted');
   }
   deleteUser();


Zugriff auf bestimmte Tabellen üìä
------------------------------------------

Prisma erlaubt direkten Zugriff auf Tabellen √ºber den Prisma Client. Jede Tabelle ist als Eigenschaft des Prisma Clients verf√ºgbar.

**Beispiel:** Zugriff auf die Tabelle `Post`:
.. code-block::javascript

    async function getPosts() {
    const posts = await prisma.post.findMany();
    console.log(posts);
    }
    getPosts();


Fazit üéâ
---------------

Prisma ist ein modernes ORM-Tool, das die Entwicklung datenbankbasierter Anwendungen vereinfacht und beschleunigt. Es ist ideal f√ºr Entwickler, die in Node.js und TypeScript arbeiten und eine elegante L√∂sung f√ºr die Verwaltung von Datenbanken suchen.

