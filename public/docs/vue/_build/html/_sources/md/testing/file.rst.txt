File Testen üî®
============================

Einleitung ü´¥
-------------------------

In dieser Anleitung zeigen wir Ihnen, wie Sie Vue-Komponenten mit Vitest testen k√∂nnen. Hierbei werden wir die Verwendung von Wrapper-Funktionen, das Testen von Props sowie spezifische Tests f√ºr Benutzerinteraktionen wie das Setzen von Werten in Eingabefeldern behandeln.

Wrapper-Funktion ü•ô
-------------------------

Um das Testen von Vue-Komponenten zu vereinfachen, ist es hilfreich, eine Wrapper-Funktion zu verwenden, die die Komponente in der richtigen Umgebung einbettet. Eine solche Wrapper-Funktion k√∂nnte folgenderma√üen aussehen:

.. code-block:: javascript

    import { mount } from '@vue/test-utils';
    import { Quasar } from 'quasar';
    import { Component } from 'vue';

    export const createWrapper = (handoverComponent: Component, props: Record<string, unknown>) => {
      const wrapper = mount(handoverComponent, {
        global: {
          plugins: [Quasar],
        },
        props: { ...props },
      });

      return wrapper;
    };

- **import { mount } from '@vue/test-utils'**: Der **mount**-Befehl wird verwendet, um eine Vue-Komponente f√ºr Tests zu rendern. Dadurch wird die Komponente vollst√§ndig in eine simulierte DOM-Umgebung eingebettet.
- **import { Quasar } from 'quasar'**: Dies bindet das Quasar Framework ein, sodass alle Quasar-Komponenten und Plugins innerhalb der Tests zur Verf√ºgung stehen.
- **props**: Die Funktion akzeptiert eine Komponente und ein Props-Objekt. Dies erm√∂glicht es Ihnen, verschiedene Werte f√ºr die zu testende Komponente anzugeben.

Die **createWrapper**-Funktion erstellt ein Wrapper-Objekt, das in Tests verwendet wird, um die Komponente zu rendern und damit zu interagieren.

Beispiel-Komponente üé≤
-------------------------

Um das Testen zu veranschaulichen, erstellen wir eine einfache Komponente namens **NumberInput.vue**, die eine Zahl als Eingabewert akzeptiert:

.. code-block:: vue

    <template>
      <div>
        <input type="number" :value="modelValue" @input="$emit('update:modelValue', $event.target.value)" />
      </div>
    </template>

    <script setup>
    defineProps({
      modelValue: Number,
      min: Number,
      max: Number,
      nullable: Boolean
    });
    </script>

Diese Komponente akzeptiert folgende Props:

- **modelValue**: Der aktuelle Wert, der im Input-Feld angezeigt wird.
- **min** und **max**: Definiert die minimalen und maximalen zul√§ssigen Werte.
- **nullable**: Bestimmt, ob der Wert auf `null` gesetzt werden kann.

Beispiel-Tests ü§¢
-------------------------

Hier sind einige Beispieltests f√ºr die **NumberInput** Komponente, die verschiedene Szenarien abdecken, z. B. das Rendern der Komponente, die Eingabe von Werten und das √úberpr√ºfen von Emits.

.. code-block:: javascript

    import { describe, expect, test } from 'vitest';
    import NumberInput from './NumberInput.vue';
    import { createWrapper } from './testUtils/wrapperHelper';
    import { nextTick } from 'vue';

    const UPDATE_MODEL_VALUE = 'update:modelValue';

    describe('NumberInput', () => {
      test('render NumberInput', async () => {
        const initialValue = 5;
        const wrapper = createWrapper(NumberInput, { modelValue: initialValue });
        expect(wrapper.exists()).toBe(true);

        await nextTick();
        const input = wrapper.find('input[type="number"]');
        expect((input.element as HTMLInputElement).value).toBe(String(initialValue));
      });

      test('update:modelValue emits correct value', async () => {
        const wrapper = createWrapper(NumberInput, { modelValue: null });
        wrapper.find('input').setValue(10);

        expect(wrapper.emitted()[UPDATE_MODEL_VALUE]).toBeTruthy();
        expect(wrapper.emitted()[UPDATE_MODEL_VALUE][0]).toEqual([10]);
      });

      test('does not emit update:modelValue if value is unchanged', async () => {
        const wrapper = createWrapper(NumberInput, { modelValue: 5 });
        expect(wrapper.emitted()[UPDATE_MODEL_VALUE]).toBeUndefined();
        await wrapper.find('input').setValue('5');
        expect(wrapper.emitted()['update:modelValue']).toBeUndefined();
      });

      test('does not emit update:modelValue for value below min', async () => {
        const wrapper = createWrapper(NumberInput, { modelValue: null, min: 5 });

        const input = wrapper.find('input[type="number"]');
        await input.setValue('4');
        expect(wrapper.emitted()[UPDATE_MODEL_VALUE]).toBeUndefined();
      });

      test('does not emit update:modelValue for value above max', async () => {
        const wrapper = createWrapper(NumberInput, { modelValue: null, max: 8 });

        const input = wrapper.find('input[type="number"]');
        await input.setValue('10');
        expect(wrapper.emitted()[UPDATE_MODEL_VALUE]).toBeUndefined();
      });
    });

Erkl√§rung der Tests:

- **render NumberInput**: Dieser Test pr√ºft, ob die Komponente korrekt gerendert wird und ob der anf√§ngliche Wert korrekt im Input-Feld gesetzt ist.
- **update:modelValue emits correct value**: Hier wird getestet, ob das richtige Ereignis (`update:modelValue`) ausgel√∂st wird, wenn der Wert im Eingabefeld ge√§ndert wird.
- **does not emit update:modelValue if value is unchanged**: Dieser Test stellt sicher, dass kein unn√∂tiges Emit ausgef√ºhrt wird, wenn der Wert im Eingabefeld nicht ge√§ndert wurde.
- **does not emit update:modelValue for value below min** und **does not emit update:modelValue for value above max**: Diese Tests pr√ºfen, ob die Komponente die minimalen und maximalen Werte korrekt ber√ºcksichtigt und das Emit verhindert, wenn der eingegebene Wert au√üerhalb des zul√§ssigen Bereichs liegt.

Metdoen und Komponenten Test üíª
-----------------------------------
Die folgende Tabelle beschreibt wichtige Test-Methoden und Attribute, die bei der Verwendung von @vue/test-utils und Vitest hilfreich sind, um Vue-Komponenten gr√ºndlich zu testen.

.. list-table:: Wichtige Test-Attribute und Methoden
   :header-rows: 1
   :widths: 25 40 35

   * - Methode/Attribut
     - Beschreibung
     - Verwendungsszenario
   * - wrapper.find(selector)
     - Sucht nach einem DOM-Element innerhalb der Komponente basierend auf dem bereitgestellten CSS-Selektor.
     - Wird verwendet, um spezifische Elemente innerhalb der Komponente zu finden, wie z.B. ein Input-Feld oder einen Button.
   * - wrapper.setValue(value)
     - Setzt den Wert eines Input-Elements oder einer anderen Eingabekomponente.
     - N√ºtzlich, um Benutzerinteraktionen wie die Eingabe von Text oder Zahlen zu simulieren und zu testen, ob die Komponente darauf reagiert.
   * - wrapper.emitted(eventName)
     - Gibt alle Ereignisse zur√ºck, die von der Komponente emittiert wurden. Kann optional mit dem Ereignisnamen gefiltert werden.
     - Verwendet, um zu testen, ob und wann bestimmte Events (wie update:modelValue) ausgel√∂st wurden, und um sicherzustellen, dass die Komponente korrekt auf Benutzereingaben reagiert.
   * - wrapper.exists()
     - Pr√ºft, ob das Wrapper-Objekt existiert (d.h. ob die Komponente erfolgreich gemountet wurde).
     - Hilfreich, um sicherzustellen, dass eine Komponente ordnungsgem√§√ü gerendert wurde.
   * - wrapper.html()
     - Gibt den HTML-Code der gerenderten Komponente als String zur√ºck.
     - Wird verwendet, um den gerenderten HTML-Code zu inspizieren und sicherzustellen, dass alle erwarteten Elemente vorhanden sind.
   * - wrapper.text()
     - Gibt den gesamten Textinhalt der Komponente zur√ºck.
     - Hilfreich, um zu pr√ºfen, ob bestimmte Texte oder Labels korrekt angezeigt werden.
   * - screen.debug()
     - Gibt die aktuelle DOM-Struktur der Komponente in der Konsole aus.
     - N√ºtzlich f√ºr Debugging-Zwecke, um den aktuellen Zustand der Komponente zu √ºberpr√ºfen.
   * - wrapper.trigger(eventType)
     - L√∂st ein bestimmtes DOM-Ereignis aus, z.B. click oder input.
     - Erm√∂glicht es, Benutzerinteraktionen wie Klicks auf Buttons oder das Eingeben von Text zu simulieren.
   * - wrapper.props(propName)
     - Gibt den Wert eines bestimmten Props zur√ºck.
     - Wird verwendet, um zu testen, ob die Komponente die erwarteten Props korrekt erh√§lt.
   * - nextTick()
     - Wartet darauf, dass alle asynchronen Vue-Updates abgeschlossen sind.
     - N√ºtzlich, wenn die Komponente auf Daten√§nderungen reagiert und diese √Ñnderungen erst nach einem "Tick" sichtbar werden.
   * - wrapper.setProps(props)
     - Setzt Props der gerenderten Komponente neu.
     - N√ºtzlich, um das Verhalten der Komponente bei √Ñnderungen der Props zu testen.
   * - wrapper.findComponent(Component)
     - Sucht nach einer eingebetteten Komponente innerhalb der Wrapper-Komponente.
     - Verwendet, um gezielt nach einer spezifischen Kinderkomponente zu suchen, um deren Verhalten zu testen.
   * - wrapper.findAll(selector)
     - Sucht nach allen DOM-Elementen, die dem bereitgestellten Selektor entsprechen, und gibt eine Sammlung von Wrappern zur√ºck.
     - Hilfreich, wenn mehrere √§hnliche Elemente (wie z.B. eine Liste von Items) gleichzeitig √ºberpr√ºft werden sollen.
   * - wrapper.classes()
     - Gibt die CSS-Klassen eines Elements als Array zur√ºck.
     - Verwendet, um zu √ºberpr√ºfen, ob bestimmte Klassen auf ein Element angewendet wurden, z.B. bei Zust√§nden wie "aktiv" oder "inaktiv".
   * - wrapper.attributes(attributeName)
     - Gibt den Wert eines bestimmten Attributs zur√ºck.
     - Wird verwendet, um sicherzustellen, dass ein bestimmtes Attribut korrekt gesetzt wurde, wie z.B. aria-* Attribute f√ºr Zug√§nglichkeit.
   * - wrapper.isVisible()
     - Pr√ºft, ob die Komponente im DOM sichtbar ist.
     - N√ºtzlich, um sicherzustellen, dass Elemente korrekt ein- oder ausgeblendet werden, abh√§ngig von bestimmten Zust√§nden.

Emitted ‚è±Ô∏è
------------------

In Vue.js gibt das Attribut ``emitted`` die von einer Komponente ausgel√∂sten (emittierten) Events zur√ºck und dient als wichtige Methode, um Events in Unit-Tests zu √ºberpr√ºfen.

.. note::
   Ein Event wird dann "emitted" (ausgel√∂st), wenn die Komponente die Kommunikation mit einem √ºbergeordneten Element initiiert oder √Ñnderungen anzeigt. 

**Wof√ºr wird ``emitted`` verwendet?** ‚ùì
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

``emitted`` wird in Unit-Tests von Vue-Komponenten genutzt, um sicherzustellen, dass spezifische Ereignisse zum erwarteten Zeitpunkt ausgel√∂st werden. Die Methode gibt eine Liste aller bisher von der Komponente gesendeten Events zur√ºck. Dies ist besonders hilfreich, um die Interaktionen und Zustands√§nderungen der Komponente zu testen.

**Verwendungsbeispiele** üòº
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1. **Formular√ºberpr√ºfung**:
   Beim Absenden eines Formulars in einer Vue-Komponente wird h√§ufig ein Event wie ``submit`` oder ``save`` ausgel√∂st, um dem √ºbergeordneten Element zu signalisieren, dass die Daten verarbeitet werden k√∂nnen.

2. **Datenaktualisierungen**:
   Bei √Ñnderungen eines Wertes in einer Eingabekomponente wird oft ein Event wie ``update:modelValue`` emittiert, um an das Eltern-Element zu melden, dass die Daten aktualisiert wurden.

**Wann wird das Event ausgel√∂st?** ü§ì
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Events in Vue-Komponenten werden ausgel√∂st, wenn die Methode ``$emit`` aufgerufen wird. Dies passiert normalerweise in Reaktion auf eine Benutzeraktion oder bei bestimmten internen Status√§nderungen. Zum Beispiel:

- Ein Button-Click innerhalb der Komponente l√∂st eine Methode aus, die wiederum ein Event wie ``clicked`` emittiert.
- Die Komponente emittiert ein Event, sobald ein Eingabefeld ver√§ndert wird und eine Reaktion erforderlich ist.

**Beispielcode**::

   <template>
     <button @click="handleClick">Klicke mich!</button>
   </template>

   <script>
   export default {
     methods: {
       handleClick() {
         this.$emit('button-clicked');
       }
     }
   }
   </script>

In diesem Beispiel emittiert die Komponente beim Klicken auf den Button ein Event namens ``button-clicked``, das vom Eltern-Element abgefangen und verarbeitet werden kann.

