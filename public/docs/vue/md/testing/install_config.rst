Install & Config ‚öôÔ∏è
=================================

Installieren üêß
----------------------

Um Vitest zu installieren, m√ºssen **NodeJs** und **NPM** installiert sein. Wenn dies noch nicht der Fall ist, k√∂nnen die beiden √ºber den folgenden Link installiert werden:

- NodeJs & NPM: [https://nodejs.org/](https://nodejs.org/)

Um dann **Vitest** in Ihrem Projekt zu installieren, f√ºhren Sie den folgenden Befehl aus:

.. code-block:: bash

    npm install -D vitest

Die Option `-D` sorgt daf√ºr, dass **Vitest** in die `devDependencies` Ihres Projekts installiert wird. Dies bedeutet, dass Vitest nur w√§hrend der Entwicklung verwendet wird und nicht im Produktionscode enthalten ist, wodurch Ihre Produktionsumgebung schlank bleibt.

Wenn Sie mit **Vue** arbeiten, empfiehlt sich zus√§tzlich die Installation des Vue-Plugins:

.. code-block:: bash

    npm install @vitejs/plugin-vue

Vitest Config ü™õ
---------------------------------

Um **Vitest** zu konfigurieren, erstellen Sie eine `vitest.config.mjs` Datei. Diese Datei definiert, wie Vitest und die damit verbundenen Plugins eingerichtet werden. Der folgende Inhalt zeigt eine Beispielkonfiguration:

.. code-block:: javascript

    import { defineConfig } from 'vitest/config';
    import vue from '@vitejs/plugin-vue';
    import { quasar, transformAssetUrls } from '@quasar/vite-plugin';
    import tsconfigPaths from 'vite-tsconfig-paths';

    // https://vitejs.dev/config/
    /** @type {import('vite').UserConfig} */
    export default defineConfig({
        test: {
            globals: true,
            environment: 'jsdom',
            setupFiles: './tests/setup-file.ts',
            include: [
                // Matches all files with extension 'js', 'jsx', 'ts' and 'tsx'
                'src/**/*.{test,spec}.{js,ts}',
            ],
        },
        plugins: [
            vue({
                template: { transformAssetUrls },
            }),
            quasar({
                sassVariables: 'src/quasar-variables.scss',
            }),
            tsconfigPaths(),
        ],
    });

Diese Konfiguration enth√§lt einige wichtige Abschnitte:

- **environment: 'jsdom'**: Stellt eine DOM-Umgebung bereit, die es erm√∂glicht, Vue-Komponenten zu testen, die auf eine Browserumgebung angewiesen sind. **jsdom** simuliert die notwendigen Browser-APIs, sodass Tests auch au√üerhalb eines echten Browsers durchgef√ºhrt werden k√∂nnen. Dies ist besonders n√ºtzlich, wenn Komponenten direkt mit dem DOM interagieren, da eine Simulation im Node.js-Umfeld eine √§hnliche Umgebung bereitstellt wie ein tats√§chlicher Browser. Alternativ gibt es auch **happy-dom** als Environment, das ebenfalls eine schnelle und einfache DOM-Umgebung bietet. Beachten Sie, dass **jsdom** oder **happy-dom** installiert werden m√ºssen, um die Tests auszuf√ºhren.

- **setupFiles**: Hier k√∂nnen Sie eine Datei angeben, die vor allen Tests geladen wird. Das ist n√ºtzlich, wenn Sie globale Setups ben√∂tigen, wie z. B. das Registrieren von globalen Komponenten, Plugins oder Mocking von APIs, die in Ihren Tests verwendet werden sollen. Diese Datei wird verwendet, um einmalige Konfigurationen f√ºr alle Tests durchzuf√ºhren. Ein Beispiel f√ºr den Inhalt einer `setup-file.ts` Datei k√∂nnte so aussehen:

  .. code-block:: javascript

      import '@testing-library/jest-dom/vitest';
      import createFetchMock from 'vitest-fetch-mock';
      import { vi } from 'vitest';

      const fetchMock = createFetchMock(vi);
      fetchMock.enableMocks();

  - **import '@testing-library/jest-dom/vitest'**: Erm√∂glicht zus√§tzliche Matcher f√ºr DOM-Elemente, wie z. B. `toBeInTheDocument()`, die das Testen von Vue-Komponenten erleichtern.
  - **createFetchMock**: Diese Funktion erstellt ein Mock f√ºr `fetch`, sodass HTTP-Anfragen in Ihren Tests simuliert werden k√∂nnen. Dies ist besonders n√ºtzlich, um externe API-Aufrufe zu mocken und sicherzustellen, dass Ihre Tests keine echten Netzwerkaufrufe durchf√ºhren. Dadurch bleiben die Tests isoliert und zuverl√§ssig.
  - **fetchMock.enableMocks()**: Aktiviert die Mock-Funktionalit√§t f√ºr `fetch`, sodass alle `fetch`-Aufrufe w√§hrend der Tests automatisch gemockt werden.

- **include**: Definiert, welche Dateien in den Testlauf eingeschlossen werden sollen. In diesem Beispiel werden alle Dateien in `src/` ber√ºcksichtigt, die auf `.test.js`, `.spec.js`, `.test.ts` oder `.spec.ts` enden. Dies stellt sicher, dass alle relevanten Testdateien automatisch erkannt werden, sodass Sie keine einzelnen Dateien manuell angeben m√ºssen. Die Verwendung von Platzhaltern (`**/*.{test,spec}.{js,ts}`) erm√∂glicht es, Tests in beliebigen Unterverzeichnissen automatisch zu finden.

- **plugins**:
  - **vue()**: Dieses Plugin bindet Vue in die Entwicklungsumgebung ein. Es ist notwendig, damit Vitest in der Lage ist, Vue-Komponenten zu verstehen und zu verarbeiten. Ohne dieses Plugin k√∂nnte Vite keine Vue-Komponenten korrekt handhaben.
  - **quasar()**: Falls Sie das Quasar Framework nutzen, erm√∂glicht dieses Plugin die Integration der Quasar-spezifischen Komponenten und Styles. Dies ist wichtig, damit die Quasar-Komponenten w√§hrend der Tests korrekt gerendert werden und alle Styles und Abh√§ngigkeiten korrekt eingebunden sind. Sie k√∂nnen damit beispielsweise spezifische SCSS-Variablen definieren, die Ihre Anwendung verwendet.
  - **tsconfigPaths()**: Dieses Plugin hilft, die in Ihrer `tsconfig.json` definierten Pfade aufzul√∂sen. Das ist besonders hilfreich, wenn Sie TypeScript verwenden und Pfadk√ºrzel wie `@components/` definieren m√∂chten, um den Import von Modulen zu erleichtern. Dies sorgt daf√ºr, dass alle importierten Module auch zur Testzeit korrekt aufgel√∂st werden k√∂nnen.

Zusammenfassung ü§ì
--------------------

Mit der `vitest.config.mjs` Datei wird die grundlegende Konfiguration f√ºr das Testen Ihrer Vue-Komponenten festgelegt. Sie integriert notwendige Plugins und sorgt daf√ºr, dass die Tests in einer geeigneten Umgebung ausgef√ºhrt werden. Die einzelnen Optionen erm√∂glichen eine flexible Anpassung an die Bed√ºrfnisse Ihres Projekts und stellen sicher, dass Tests effizient und zuverl√§ssig durchgef√ºhrt werden k√∂nnen.