Info zu FastAPI & Uvicorn ü¶Ñ
=================================

In diesem Bereich geht es um REST-APIs und serverseitige Anwendungen. 
Dabei liegt der Fokus auf der Verwendung des Webframeworks **FastAPI** und des ASGI-Servers **Uvicorn**, 
die gemeinsam leistungsf√§hige und moderne Server-Anwendungen erm√∂glichen.

FastAPI ‚ö°
-----------

FastAPI ist ein modernes Webframework f√ºr Python, das speziell f√ºr den schnellen Aufbau von APIs entwickelt wurde. 
Es basiert auf **Starlette** (einem asynchronen Webframework) und **Pydantic** (f√ºr Datenvalidierung) und bietet eine 
intuitive und performante L√∂sung f√ºr API-Entwicklung.


**Hauptmerkmale von FastAPI:**

- **Automatische Dokumentation**: OpenAPI (Swagger UI, ReDoc) wird automatisch generiert.
- **Asynchrone Programmierung**: Unterst√ºtzung f√ºr `async`/`await`, ideal f√ºr parallele Anfragen.
- **Eingebaute Validierung**: Dank Pydantic werden Eingaben und Ausgaben automatisch validiert und serialisiert.
- **Hohe Performance**: FastAPI ist eines der schnellsten Frameworks f√ºr Python, vergleichbar mit Node.js-Frameworks.
- **Typensicherheit**: Durch die Nutzung von Python-Typannotation ist FastAPI sicher und leicht zu debuggen.
- **Einfacher Einstieg**: Ideal f√ºr Anf√§nger, bietet aber genug Flexibilit√§t f√ºr komplexe Anwendungen.

**Anwendungsf√§lle von FastAPI:**

- **REST-APIs**: Ideal f√ºr die Implementierung von CRUD-Operationen, Benutzerverwaltung, Datenbankanbindungen usw.
- **WebSocket-Server**: Erm√∂glicht die Echtzeitkommunikation f√ºr Chat-Apps oder Dashboards.
- **Backend f√ºr Machine-Learning-Modelle**: APIs zur Bereitstellung von KI-Modellen oder Datenanalyse.
- **Ereignisbasierte Anwendungen**: Microservices und andere Event-getriebene Systeme.
- **Webhooks**: Integration mit externen Diensten wie Payment-Gateways oder GitHub.

Uvicorn
-------

**Uvicorn** ist ein leichter und schneller ASGI-Server (Asynchronous Server Gateway Interface). 
Er dient als Server, der FastAPI-Apps ausf√ºhrt und HTTP-/WebSocket-Anfragen verarbeitet. 


**Hauptmerkmale von Uvicorn:**

- **ASGI-Unterst√ºtzung**: Vollst√§ndig kompatibel mit asynchronen Python-Frameworks.
- **Hohe Geschwindigkeit**: Minimalistisch und effizient, perfekt f√ºr Echtzeitanwendungen.
- **WebSocket-Unterst√ºtzung**: Erm√∂glicht bidirektionale Kommunikation f√ºr Echtzeitdienste.
- **Hot Reloading**: Perfekt f√ºr Entwicklungsumgebungen, √Ñnderungen werden sofort wirksam.
- **Flexibilit√§t**: Kann sowohl einfache APIs als auch komplexe Anwendungen hosten.

**Anwendungsf√§lle von Uvicorn:**

- **Hosting von FastAPI-Apps**: Startet FastAPI-Anwendungen und stellt sie bereit.
- **WebSocket-Server**: Unterst√ºtzung f√ºr Echtzeitprotokolle.
- **Streaming-Dienste**: Verarbeitung von Video-, Audio- oder Datenstr√∂men.
- **Microservices**: Ideal f√ºr modulare, serviceorientierte Architekturen.

Installation üõ†Ô∏è
------------------

Die Installation von FastAPI und Uvicorn ist einfach und erfordert nur wenige Schritte.

1. Stelle sicher, dass Python 3.7 oder h√∂her installiert ist.
2. F√ºhre folgenden Befehl aus, um beide Pakete zu installieren:

   .. code-block:: bash

      pip install fastapi uvicorn

3. Optional: Verwende virtuelle Umgebungen, um deine Projekte sauber und getrennt zu halten.

Zusammenspiel von FastAPI und Uvicorn üôè
------------------------------------------

FastAPI und Uvicorn arbeiten nahtlos zusammen:

- **FastAPI**: Definiert die Logik, Struktur und Endpunkte der API.
- **Uvicorn**: Hostet die Anwendung und verarbeitet die HTTP-/WebSocket-Anfragen.

Typischer Workflow:

- Die API wird in FastAPI definiert (z. B. `app = FastAPI()`).
- Uvicorn startet die Anwendung und bietet sie unter einer bestimmten Adresse an:

  .. code-block:: bash

     uvicorn main:app --reload

  - `main`: Der Name der Python-Datei.
  - `app`: Die FastAPI-Anwendung.
  - `--reload`: Aktiviert automatisches Neuladen bei Code√§nderungen.

Vergleich: FastAPI und Uvicorn ‚öñÔ∏è
----------------------------------

.. list-table:: Vergleich zwischen FastAPI und Uvicorn
   :header-rows: 1
   :widths: 25 25 50

   * - **Merkmal**
     - **FastAPI**
     - **Uvicorn**
   * - Rolle
     - Webframework
     - ASGI-Server
   * - Aufgabe
     - Definiert APIs und Logik
     - F√ºhrt die Anwendung aus
   * - Technologie
     - Pydantic, Starlette
     - ASGI, HTTP/WebSockets
   * - Verwendung
     - API-Entwicklung
     - Bereitstellung der App

Weitere Einsatzm√∂glichkeiten üöÄ
--------------------------------

**FastAPI** und **Uvicorn** k√∂nnen f√ºr viele Anwendungsf√§lle au√üerhalb von klassischen REST-APIs eingesetzt werden:

- **GraphQL-APIs**: Kombiniert mit GraphQL-Frameworks wie Ariadne oder Strawberry.
- **Streaming-Anwendungen**: Video-/Audio-Streams oder Live-Datenfeeds.
- **Microservices**: Hosting kleiner, isolierter Dienste.
- **Protokoll√ºbergreifende Server**: Verarbeitung von HTTP, WebSocket oder anderen Protokollen (z. B. MQTT).

Zusammenfassung ü§ì
---------------------

FastAPI und Uvicorn bilden ein leistungsstarkes Duo f√ºr moderne Webanwendungen. 
W√§hrend FastAPI die API-Logik definiert, stellt Uvicorn sicher, dass die Anwendung effizient ausgef√ºhrt wird. 
Diese Kombination eignet sich hervorragend f√ºr REST-APIs, Echtzeitkommunikation, Streaming-Dienste und vieles mehr.
